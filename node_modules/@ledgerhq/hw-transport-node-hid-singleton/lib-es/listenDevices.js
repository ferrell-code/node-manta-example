import { usb } from "usb";
import { ledgerUSBVendorId } from "@ledgerhq/devices";
import { log } from "@ledgerhq/logs";
var deviceToLog = function (_a) {
    var idProduct = _a.deviceDescriptor.idProduct, busNumber = _a.busNumber, deviceAddress = _a.deviceAddress;
    return "productId=".concat(idProduct, " busNumber=").concat(busNumber, " deviceAddress=").concat(deviceAddress);
};
var usbDebounce = 1000;
export var setUsbDebounce = function (n) {
    usbDebounce = n;
};
var mapRawDevice = function (_a) {
    var locationId = _a.busNumber, deviceAddress = _a.deviceAddress, _b = _a.deviceDescriptor, vendorId = _b.idVendor, productId = _b.idProduct, serialNumber = _b.iSerialNumber;
    return ({
        locationId: locationId,
        vendorId: vendorId,
        productId: productId,
        deviceName: "",
        manufacturer: "",
        serialNumber: serialNumber,
        deviceAddress: deviceAddress
    });
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export var listenDevices = function (onAdd, onRemove) {
    var timeout;
    var add = function (device) {
        if (device.deviceDescriptor.idVendor !== ledgerUSBVendorId)
            return;
        log("usb-detection", "add: " + deviceToLog(device));
        if (!timeout) {
            // a time is needed for the device to actually be connectable over HID..
            // we also take this time to not emit the device yet and potentially cancel it if a remove happens.
            timeout = setTimeout(function () {
                onAdd(mapRawDevice(device));
                timeout = null;
            }, usbDebounce);
        }
    };
    var remove = function (device) {
        if (device.deviceDescriptor.idVendor !== ledgerUSBVendorId)
            return;
        log("usb-detection", "remove: " + deviceToLog(device));
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        else {
            onRemove(mapRawDevice(device));
        }
    };
    usb.on("attach", add);
    usb.on("detach", remove);
    return function () {
        if (timeout)
            clearTimeout(timeout);
        usb.unrefHotplugEvents();
    };
};
process.on("exit", function () {
    usb.unrefHotplugEvents();
});
//# sourceMappingURL=listenDevices.js.map