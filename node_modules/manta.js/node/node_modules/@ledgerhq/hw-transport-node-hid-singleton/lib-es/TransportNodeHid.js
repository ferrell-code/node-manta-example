var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import HID from "node-hid";
import TransportNodeHidNoEvents, { getDevices, } from "@ledgerhq/hw-transport-node-hid-noevents";
import { log } from "@ledgerhq/logs";
import { identifyUSBProductId } from "@ledgerhq/devices";
import { CantOpenDevice } from "@ledgerhq/errors";
import { listenDevices } from "./listenDevices";
var transportInstance;
var DISCONNECT_TIMEOUT = 5000;
var disconnectTimeout;
var clearDisconnectTimeout = function () {
    if (disconnectTimeout) {
        clearTimeout(disconnectTimeout);
    }
};
var setDisconnectTimeout = function () {
    clearDisconnectTimeout();
    disconnectTimeout = setTimeout(function () { return TransportNodeHidSingleton.autoDisconnect(); }, DISCONNECT_TIMEOUT);
};
/**
 * node-hid Transport implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid-singleton";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */
var TransportNodeHidSingleton = /** @class */ (function (_super) {
    __extends(TransportNodeHidSingleton, _super);
    function TransportNodeHidSingleton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.preventAutoDisconnect = false;
        return _this;
    }
    /**
     * convenience wrapper for auto-disconnect logic
     */
    TransportNodeHidSingleton.autoDisconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (transportInstance && !transportInstance.preventAutoDisconnect) {
                    log("hid-verbose", "triggering auto disconnect");
                    TransportNodeHidSingleton.disconnect();
                }
                else if (transportInstance) {
                    // If we have disabled the auto-disconnect, try again in DISCONNECT_TIMEOUT
                    clearDisconnectTimeout();
                    setDisconnectTimeout();
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * globally disconnect the transport singleton
     */
    TransportNodeHidSingleton.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (transportInstance) {
                    transportInstance.device.close();
                    transportInstance.emit("disconnect");
                    transportInstance = null;
                }
                clearDisconnectTimeout();
                return [2 /*return*/];
            });
        });
    };
    /**
     * if path="" is not provided, the library will take the first device
     */
    TransportNodeHidSingleton.open = function () {
        clearDisconnectTimeout();
        return Promise.resolve().then(function () {
            if (transportInstance) {
                log("hid-verbose", "reusing opened transport instance");
                return transportInstance;
            }
            var device = getDevices()[0];
            if (!device)
                throw new CantOpenDevice("no device found");
            log("hid-verbose", "new HID transport");
            transportInstance = new TransportNodeHidSingleton(new HID.HID(device.path));
            var unlisten = listenDevices(function () { }, function () {
                // assume any ledger disconnection concerns current transport
                if (transportInstance) {
                    transportInstance.emit("disconnect");
                }
            });
            var onDisconnect = function () {
                if (!transportInstance)
                    return;
                log("hid-verbose", "transport instance was disconnected");
                transportInstance.off("disconnect", onDisconnect);
                transportInstance = null;
                unlisten();
            };
            transportInstance.on("disconnect", onDisconnect);
            return transportInstance;
        });
    };
    TransportNodeHidSingleton.prototype.setAllowAutoDisconnect = function (allow) {
        this.preventAutoDisconnect = !allow;
    };
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    TransportNodeHidSingleton.prototype.exchange = function (apdu) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clearDisconnectTimeout();
                        return [4 /*yield*/, _super.prototype.exchange.call(this, apdu)];
                    case 1:
                        result = _a.sent();
                        setDisconnectTimeout();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    TransportNodeHidSingleton.prototype.close = function () {
        // intentionally, a close will not effectively close the hid connection but
        // will allow an auto-disconnection after some inactivity
        this.preventAutoDisconnect = false;
        return Promise.resolve();
    };
    /**
     *
     */
    TransportNodeHidSingleton.isSupported = TransportNodeHidNoEvents.isSupported;
    /**
     *
     */
    TransportNodeHidSingleton.list = TransportNodeHidNoEvents.list;
    /**
     */
    TransportNodeHidSingleton.listen = function (observer) {
        var unsubscribed;
        Promise.resolve(getDevices()).then(function (devices) {
            var e_1, _a;
            try {
                // this needs to run asynchronously so the subscription is defined during this phase
                for (var devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
                    var device = devices_1_1.value;
                    if (!unsubscribed) {
                        var deviceModel = identifyUSBProductId(device.productId);
                        observer.next({
                            type: "add",
                            descriptor: "",
                            device: {
                                name: device.deviceName
                            },
                            deviceModel: deviceModel
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (devices_1_1 && !devices_1_1.done && (_a = devices_1["return"])) _a.call(devices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        var onAdd = function (device) {
            var deviceModel = identifyUSBProductId(device.productId);
            observer.next({
                type: "add",
                descriptor: "",
                deviceModel: deviceModel,
                device: {
                    name: device.deviceName
                }
            });
        };
        var onRemove = function (device) {
            var deviceModel = identifyUSBProductId(device.productId);
            observer.next({
                type: "remove",
                descriptor: "",
                deviceModel: deviceModel,
                device: {
                    name: device.deviceName
                }
            });
        };
        var stop = listenDevices(onAdd, onRemove);
        function unsubscribe() {
            stop();
            unsubscribed = true;
        }
        return {
            unsubscribe: unsubscribe
        };
    };
    return TransportNodeHidSingleton;
}(TransportNodeHidNoEvents));
export default TransportNodeHidSingleton;
//# sourceMappingURL=TransportNodeHid.js.map